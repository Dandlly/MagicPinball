{"version":3,"sources":["assets\\script\\common\\Cache.ts"],"names":[],"mappings":";;;;;AAAA;;;GAGG;;AAEH;IAIE;QACE,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,yBAAS,GAAhB,UAAiB,GAAa;QAC5B,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YAC5B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;SACvB;IACH,CAAC;IAEM,mBAAG,GAAV,UAAW,GAAa,EAAE,IAAS;QACjC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI;YAAE,OAAO;QAC1B,2BAA2B;QAC3B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC/D,CAAC;IAEM,mBAAG,GAAV,UAAW,GAAa;QACtB,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACxE,CAAC;IAED;;;;OAIG;IACK,wBAAQ,GAAhB,UAAiB,GAAqB;QACpC,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9B,GAAG,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,GAAG;YACpB,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QAClB,CAAC,CAAC,CAAA;QACF,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;;;OAKG;IACI,uBAAO,GAAd,UAAe,GAAa,EAAE,MAAc;QAC1C,IAAI,KAAK,CAAC;QACV,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;YAAE,OAAO,KAAK,CAAC;QACpC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;QACjC,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACI,6BAAa,GAApB,UAAqB,GAAa,EAAE,KAAa,EAAE,QAAgB;QACjE,IAAI,MAAM,GAAG,EAAE,CAAA;QACf,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;YAAE,OAAO,MAAM,CAAC;QACrC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAE7B,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE;YACvB,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,QAAQ,EAAE;gBACnC,IAAI,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAA;gBACxB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACjB;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IACH,YAAC;AAAD,CArEA,AAqEC,IAAA;AAGY,QAAA,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;AAEjC,gBAAgB;AAChB,IAAY,QAGX;AAHD,WAAY,QAAQ;IAClB,iCAAqB,CAAA;AAEvB,CAAC,EAHW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAGnB;AAED,SAAS;AACI,QAAA,cAAc,GAAe;IACxC,QAAQ,CAAC,QAAQ;CAClB,CAAC;AAEW,QAAA,iBAAiB,GAAG,SAAS,CAAC","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 缓存类\r\n * @author sheep\r\n */\r\n\r\nclass Cache {\r\n\r\n  private _cache: object;\r\n\r\n  constructor() {\r\n    this._cache = {};\r\n  }\r\n\r\n  public initCache(key: CacheKey): void {\r\n    if (key && !this._cache[key]) {\r\n      this._cache[key] = {};\r\n    }\r\n  }\r\n\r\n  public set(key: CacheKey, data: any): void {\r\n    if (!key || !data) return;\r\n    // this._cache[key] = data;\r\n    this._cache[key] = data.forEach ? this.mapToObj(data) : data;\r\n  }\r\n\r\n  public get(key: CacheKey): any {\r\n    return key ? JSON.parse(JSON.stringify(this._cache[key])) : undefined;\r\n  }\r\n\r\n  /**\r\n   * 将Map对象转换为Object对象\r\n   * @param {Map<number, any>} map\r\n   * @returns {Object} \r\n   */\r\n  private mapToObj(map: Map<number, any>): Object {\r\n    let obj = Object.create(null);\r\n    map.forEach((data, key) => {\r\n      obj[key] = data;\r\n    })\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * 获取单条json数据\r\n   * @param key CacheKey\r\n   * @param getNum \r\n   * @param field \r\n   */\r\n  public getItem(key: CacheKey, getNum: number): any {\r\n    let table;\r\n    if (!this._cache[key]) return table;\r\n    table = this._cache[key][getNum];\r\n    return table;\r\n  }\r\n\r\n  /**\r\n   * 根据某个字段的数值获取某张配置表的某条数据\r\n   * @param key 配置表\r\n   * @param field 字段名\r\n   * @param fieldNum 该字段满足=fieldNum\r\n   */\r\n  public getItemByType(key: CacheKey, field: string, fieldNum: number): any {\r\n    let reList = []\r\n    if (!this._cache[key]) return reList;\r\n    let table = this._cache[key];\r\n\r\n    for (let count in table) {\r\n      if (table[count][field] == fieldNum) {\r\n        let ci = parseInt(count)\r\n        reList.push(ci);\r\n      }\r\n    }\r\n    return reList;\r\n  }\r\n}\r\n\r\n\r\nexport const cache = new Cache();\r\n\r\n// 缓存键名 (Table名)\r\nexport enum CacheKey {\r\n  language = 'language',\r\n\r\n}\r\n\r\n// 缓存文件配置\r\nexport const CacheFileNames: CacheKey[] = [\r\n  CacheKey.language\r\n];\r\n\r\nexport const CACHE_CONFIG_PATH = 'config/';"]}