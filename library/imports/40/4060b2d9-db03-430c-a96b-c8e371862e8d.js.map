{"version":3,"sources":["assets\\script\\common\\GPool.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;GAEG;AACH,IAAI,KAAK,GAAG;IAAI;QAEZ,+CAA+C;QACvC,cAAS,GAAG,SAAS,CAAC;QAC9B,sBAAsB;QACd,gBAAW,GAAG,CAAC,CAAC;QACxB,sBAAsB;QACd,cAAS,GAAG,EAAE,CAAC;QACvB,iCAAiC;QACzB,sBAAiB,GAAG,SAAS,CAAC;QAEtC,iBAAiB;QACT,aAAQ,GAA6B,IAAI,GAAG,EAAE,CAAC;QACvD,qBAAqB;QACb,eAAU,GAA2B,IAAI,GAAG,EAAE,CAAC;IAmK3D,CAAC;IAjKG;;;;;;;;;;;;OAYG;IACH,sBAAI,GAAJ,UAAK,QAAuG;QAA5G,iBAeC;QAfI,yBAAA,EAAA,aAAuG;QACxG,mBAAmB;QACnB,KAAgB,UAAqB,EAArB,KAAA,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAArB,cAAqB,EAArB,IAAqB,EAAE;YAAlC,IAAI,GAAG,SAAA;YACR,IAAI,OAAO,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,WAAW,EAAE;gBACvC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;aACnC;SACJ;QACD,UAAU;QACV,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,MAAM,EAAE,UAAC,GAAG,EAAE,OAAO,EAAE,IAAc;YACzE,gDAAgD;YAChD,KAAgB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;gBAAjB,IAAI,GAAG,aAAA;gBACR,IAAI,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACzB,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;aACvC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACW,2BAAS,GAAvB,UAAwB,UAAkB;;;;;4BACtC,qBAAM,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;4BAC9B,EAAE,CAAC,MAAM,CAAC,OAAO,CAAI,KAAI,CAAC,SAAS,SAAI,UAAY,EAAE,EAAE,CAAC,MAAM,EAAE,UAAC,GAAG,EAAE,MAAiB;gCACnF,IAAI,GAAG,EAAE;oCACL,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,CAAC;oCAClC,MAAM,CAAC,GAAG,CAAC,CAAC;oCACZ,OAAO;iCACV;gCACD,IAAI,QAAQ,GAAG,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;gCACjC,IAAI,OAAO,GAAG,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,KAAI,CAAC,WAAW,CAAC;gCAC7D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;oCAC9B,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;iCACxC;gCACD,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gCACxC,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;gCACxC,sCAAsC;gCACtC,OAAO,EAAE,CAAC;4BACd,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,EAAA;;wBAjBF,SAiBE,CAAC;;;;;KACN;IAED;;;;;;;;;;;;;OAaG;IACG,qBAAG,GAAT,UAAU,UAAkB,EAAE,QAAqD;QAArD,yBAAA,EAAA,aAAqD;;;;;;;wBACzE,SAAS,GAAc,QAAQ,UAAtB,EAAE,OAAO,GAAK,QAAQ,QAAb,CAAc;wBAClC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;wBACzC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;6BACzC,CAAA,QAAQ,IAAI,MAAM,CAAA,EAAlB,wBAAkB;wBAClB,8BAA8B;wBAC9B,sBAAO,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC,EAAC;4BAC7C,WAAW;oBACf,6BAA6B;oBAC7B,qBAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAA;;wBADhC,6BAA6B;wBAC7B,SAAgC,CAAC;wBACjC,sBAAO,IAAI,OAAO,CAAU,UAAC,OAAO,EAAE,MAAM;gCACxC,OAAO,CAAC,KAAI,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;4BACvD,CAAC,CAAC,EAAC;;;;KAEV;IAED;;;;OAIG;IACW,sBAAI,GAAlB,UAAmB,UAAkB,EAAE,SAAkB,EAAE,OAAY;;;;gBACnE,sBAAO,IAAI,OAAO,CAAU,UAAC,OAAO,EAAE,MAAM;wBACxC,IAAI,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;wBAC7C,IAAI,MAAM,GAAG,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;wBAC7C,IAAI,SAAS,EAAE,EAAC,SAAS;4BACrB,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;yBACxB;6BAAM,EAAC,QAAQ;4BACZ,IAAI,OAAO,GAAG,IAAI,CAAC;4BACnB,IAAI,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;gCACrB,OAAO,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;6BAC5B;iCAAM;gCACH,sCAAsC;gCACtC,OAAO,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;6BACpC;4BACD,SAAS;4BACT,IAAI,OAAO,EAAE;gCACT,IAAI,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;gCAC9C,IAAI,MAAM,IAAI,MAAM,CAAC,KAAI,CAAC,iBAAiB,CAAC,EAAE;oCAC1C,IAAI,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,eAAe,IAAI,CAAC;wCAAE,MAAM,CAAC,SAAS,EAAE,CAAC;oCACxE,MAAM,CAAC,KAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC;iCAC3C;qCAAM;oCACH,6DAA6D;iCAChE;6BACJ;4BACD,OAAO,CAAC,OAAO,CAAC,CAAC;yBACpB;oBACL,CAAC,CAAC,EAAC;;;KACN;IAED;;;;OAIG;IACH,qBAAG,GAAH,UAAI,IAAa;QACb,YAAY;QACZ,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,QAAQ,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IACvD,CAAC;IAED;;;;OAIG;IACH,6BAAW,GAAX,UAAY,UAAkB;QAC1B,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC7C,QAAQ,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,gCAAc,GAAd;QACI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,KAAK,EAAE,EAAhB,CAAgB,CAAC,CAAC;QACpD,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACtB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC;IAED,8BAAY,GAAZ,UAAa,IAAa;QACtB,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YACnB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACnB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;YAC/C,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,sBAAsB,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;SAC/D;IACL,CAAC;IAEL,cAAC;AAAD,CAjLgB,AAiLf,KAAE,CAAC;AACJ,MAAM,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC","file":"","sourceRoot":"/","sourcesContent":["/**全局节点池模块  \r\n * 注意：预制名字和其上面挂载脚本名字一样  \r\n */\r\nlet GPool = new class {\r\n\r\n    /**保存所有要生成节点池的预制的根目录，相对\"resources/\"目录  \"Pool\"*/\r\n    private _PoolPath = \"prefabs\";\r\n    /**所有预制初始生成节点池的数量 0 */\r\n    private _InitCommon = 0;\r\n    /**分别设置每个节点池初始数量 {} */\r\n    private _InitEach = {};\r\n    /**获取预制节点后设置预制数据的函数名 \"setData\" */\r\n    private _InitFunctionName = \"setData\";\r\n\r\n    /**保存所有节点池的map */\r\n    private _allPool: Map<string, cc.NodePool> = new Map();\r\n    /**保存所有预制名及其预制的map */\r\n    private _allPrefab: Map<string, cc.Prefab> = new Map();\r\n\r\n    /**初始化设置生成Pool的默认参数，一般都用默认的默认参数，  \r\n     * - ***可不调用此函数***  \r\n     * @param optional 属性参数说明如下：\r\n     * @param optional.PoolPath 保存所有要生成节点池的预制的根目录，默认为\"Pool\"  \r\n     * @param optional.InitCommon 所有预制初始生成节点池的数量，默认为0  \r\n     * @param optional.InitEach 分别设置每个节点池初始数量，不设置的默认为 InitCommon  \r\n     * optional.InitEach 对象的键名为预制名字，键值为初始化数量  \r\n     * @param optional.InitFunctionName 获取预制节点后设置预制数据的函数名，默认为 \"setData\"   \r\n     * @example\r\n     * //设置预制prefabName1的初始数量为10，预制prefabName2的初始数量为20  \r\n     * GPool.init({InitEach: {prefabName1: 10, prefabName2: 20}});  \r\n     *\r\n     */\r\n    init(optional: { PoolPath?: string, InitCommon?: number, InitEach?: object, InitFunctionName?: string } = {}) {\r\n        //设置了默认参数的替换默认的默认参数\r\n        for (let key of Object.keys(optional)) {\r\n            if (typeof this[\"_\" + key] != \"undefined\") {\r\n                this[\"_\" + key] = optional[key];\r\n            }\r\n        }\r\n        //初始化所有节点池\r\n        cc.loader.loadResDir(this._PoolPath, cc.Prefab, (err, prefabs, urls: string[]) => {\r\n            // console.warn(\"初始化所有节点池\", err, prefabs, urls);\r\n            for (let one of urls) {\r\n                let url = one.split(\"/\");\r\n                this._initPool(url[url.length - 1]);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**初始化节点池  \r\n     * @param prefabName 预制节点的名字  \r\n     */\r\n    private async _initPool(prefabName: string) {\r\n        await new Promise((resolve, reject) => {\r\n            cc.loader.loadRes(`${this._PoolPath}/${prefabName}`, cc.Prefab, (err, prefab: cc.Prefab) => {\r\n                if (err) {\r\n                    console.error(err.message || err);\r\n                    reject(err);\r\n                    return;\r\n                }\r\n                let nodePool = new cc.NodePool();\r\n                let initNum = this._InitEach[prefabName] || this._InitCommon;\r\n                for (let i = 0; i < initNum; i++) {\r\n                    nodePool.put(cc.instantiate(prefab));\r\n                }\r\n                this._allPool.set(prefabName, nodePool);\r\n                this._allPrefab.set(prefabName, prefab);\r\n                // console.warn(\"初始化节点池\", prefabName);\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**根据预制的名字从对应的节点池获取一个节点  \r\n     * @param prefabName 预制的名字  \r\n     * @param optional 属性参数说明如下：  \r\n     * @param optional.isGetInfo 是否只获取预制的信息不获取对应的节点  \r\n     * @param optional.setData 传递给预制上挂载的脚本的设置数据函数的参数 \r\n     * @example\r\n     * GPool.get(\"LabelIten\", { isGetInfo: true }).then((node: cc.Node) => {\r\n            console.error(\"node info\", node);\r\n       });\r\n\r\n       GPool.get(\"ColorItem\", { setData: { tips: \"加载成功\" } }).then((node: cc.Node) => {\r\n            node.parent = this.node;\r\n       });\r\n     */\r\n    async get(prefabName: string, optional: { isGetInfo?: boolean, setData?: any } = {}) {\r\n        let { isGetInfo, setData } = optional;\r\n        let nodePool = this._allPool.get(prefabName);\r\n        let prefab = this._allPrefab.get(prefabName);\r\n        if (nodePool && prefab) {//已经提前生成了节点池\r\n            // console.warn(\"已经提前生成了节点池\");\r\n            return this._get(prefabName, isGetInfo, setData);\r\n        } else {//还没有对应的节点池\r\n            // console.warn(\"还没有对应的节点池\");\r\n            await this._initPool(prefabName);\r\n            return new Promise<cc.Node>((resolve, reject) => {\r\n                resolve(this._get(prefabName, isGetInfo, setData));\r\n            });\r\n        }\r\n    }\r\n\r\n    /**获取节点  \r\n     * @param prefabName 预制的名字  \r\n     * @param isGetInfo 是否只获取预制的信息不获取对应的节点  \r\n     * @param prefabName 传递给预制上挂载的脚本的设置数据函数的参数  \r\n     */\r\n    private async _get(prefabName: string, isGetInfo: boolean, setData: any) {\r\n        return new Promise<cc.Node>((resolve, reject) => {\r\n            let nodePool = this._allPool.get(prefabName);\r\n            let prefab = this._allPrefab.get(prefabName);\r\n            if (isGetInfo) {//只获取预制信息\r\n                resolve(prefab.data);\r\n            } else {//获取预制节点\r\n                let getNode = null;\r\n                if (nodePool.size() > 0) {\r\n                    getNode = nodePool.get();\r\n                } else {\r\n                    // console.warn(prefabName + \"重新创建!\");\r\n                    getNode = cc.instantiate(prefab);\r\n                }\r\n                //是否初始化数据\r\n                if (setData) {\r\n                    let script = getNode.getComponent(prefabName);\r\n                    if (script && script[this._InitFunctionName]) {\r\n                        if (script.__preload && script._isOnLoadCalled == 0) script.__preload();\r\n                        script[this._InitFunctionName](setData);\r\n                    } else {\r\n                        // console.warn(`没有${this._InitFunctionName}函数`, prefabName);\r\n                    }\r\n                }\r\n                resolve(getNode);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**将一个节点回收到对应的节点池\r\n     * @param node 要回收的节点  \r\n     * @example\r\n     * GPool.put(this.node);\r\n     */\r\n    put(node: cc.Node) {\r\n        //执行通用化的还原操作\r\n        node.stopAllActions();\r\n        this.reductionFun(node);\r\n        let nodePool = this._allPool.get(node.name);\r\n        nodePool.put(node);\r\n        FLog.normal(node.name + \"节点池数量:\", nodePool.size());\r\n    }\r\n\r\n    /**销毁一个节点池并销毁其中所有的节点  \r\n     * @param prefabName 预制的名字   \r\n     * @example  \r\n     * GPool.destroyPool(\"LabelIten\");\r\n     */\r\n    destroyPool(prefabName: string) {\r\n        let nodePool = this._allPool.get(prefabName);\r\n        nodePool.clear();\r\n    }\r\n\r\n    /**销毁所有节点池及所有缓存的节点  \r\n     * @example  \r\n     * GPool.destroyAllPool();\r\n     */\r\n    destroyAllPool() {\r\n        this._allPool.forEach(nodePool => nodePool.clear());\r\n        this._allPool.clear();\r\n        this._allPrefab.clear();\r\n    }\r\n\r\n    reductionFun(node: cc.Node) {\r\n        if (node.name == 'bx') {\r\n            node.opacity = 255;\r\n            node.scale = 1;\r\n            node.getChildByName('New Label').active = true;\r\n            node.getComponent(cc.PhysicsPolygonCollider).enabled = true;\r\n        }\r\n    }\r\n\r\n}();\r\nwindow[\"GPool\"] = GPool;\r\n"]}