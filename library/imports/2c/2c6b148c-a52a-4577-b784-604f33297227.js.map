{"version":3,"sources":["assets\\script\\common\\PopupComponent.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 弹窗组件\r\n * @author yxx0\r\n */\r\n\r\nimport { PopUpName } from \"./PopupConstants\";\r\nimport { events } from \"./Events\";\r\nimport { GameEvents } from \"./EventConstants\";\r\nimport { actions } from \"./Actions\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PopupComponent extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    nodeMask: cc.Node = null;\r\n\r\n    private popups: cc.Node[] = [];\r\n    private list: PopUpName[] = [];\r\n\r\n    onLoad(): void {\r\n        // 保存全局方法\r\n        events.on(this.name, this.uuid, GameEvents.SHOW_POPUP, this.show, this);\r\n        events.on(this.name, this.uuid, GameEvents.HIDE_POPUP, this.hide, this);\r\n        events.on(this.name, this.uuid, GameEvents.HIDE_ALL_POPUP, this.hideAll, this);\r\n    }\r\n\r\n    /**\r\n     * 显示弹窗\r\n     * @param {PopUpName} name 弹窗名\r\n     * @param {() => void} cb 成功回调\r\n     * @param {any[]} data 弹窗数据(数组类型)\r\n     * @param {boolean} needMask 是否需要蒙层\r\n     */\r\n    private async show(name: PopUpName, cb?: () => void, data: any = null, needMask: boolean = true): Promise<void> {\r\n        if (this.list.some(nName => nName === name)) return;\r\n\r\n        const node = await this.getPopUpNode(name);\r\n\r\n        const comp = node._components[0] // 私有属性\r\n        if (comp && data) {\r\n            comp._data = data;\r\n        }\r\n\r\n        this.node.addChild(node);\r\n        actions.openPopup(node);\r\n        this.nodeMask.active = needMask;\r\n\r\n        this.list.push(name);\r\n\r\n        this.checkMaskzIndex();\r\n\r\n        // 执行回调\r\n        if (cb) cb();\r\n    }\r\n\r\n    /**\r\n     * 隐藏弹窗\r\n     * @param {() => void} cb 成功回调\r\n     */\r\n    private hide(cb?: () => void): void {\r\n        if (!this.list.length) return;\r\n\r\n        const name = this.list.pop();\r\n\r\n        this.node.children.forEach((node) => {\r\n            if (node.name === name) {\r\n                actions.closePopup(node, () => {\r\n                    node.removeFromParent();\r\n                    node.destroy();\r\n                })\r\n            }\r\n        })\r\n\r\n        this.checkMaskzIndex();\r\n\r\n        // this.nodeMask.active = this.list.length >= 1;\r\n        this.nodeMask.active = false;\r\n\r\n        // 执行回调\r\n        if (cb) cb();\r\n    }\r\n\r\n    /**\r\n     * 隐藏所有弹窗\r\n     * @param {() => void} cb 成功回调\r\n     */\r\n    private hideAll(cb?: () => void): void {\r\n        if (!this.list.length) return;\r\n\r\n        this.list = [];\r\n\r\n        this.node.children.forEach((node) => {\r\n            if (this.nodeMask.name === node.name) return;\r\n            actions.closePopup(node, () => {\r\n                node.removeFromParent();\r\n                node.destroy();\r\n            })\r\n        })\r\n\r\n        this.nodeMask.active = false;\r\n\r\n        // 执行回调\r\n        if (cb) cb();\r\n    }\r\n\r\n    /**\r\n     * 获取弹窗节点\r\n     */\r\n    private async getPopUpNode(name: PopUpName | string): Promise<cc.Node> {\r\n        return await this.popups.find(node => node.name === name) || this.createPopUpNode(name);\r\n    }\r\n\r\n    /**\r\n     * 加载弹窗节点\r\n     */\r\n    private createPopUpNode(name: PopUpName | string): Promise<cc.Node> {\r\n        events.emit(GameEvents.SHOW_LOADING);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            cc.loader.loadRes(`popupPerfab/${name}`, cc.Prefab, (err, res) => {\r\n                if (err) {\r\n                    events.emit(GameEvents.HIDE_LOADING);\r\n                    reject(null);\r\n                }\r\n\r\n                const node = cc.instantiate(res);\r\n                this.popups.push(node);\r\n                events.emit(GameEvents.HIDE_LOADING);\r\n                resolve(node);\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 刷新maskzIndex\r\n     */\r\n    private checkMaskzIndex(): void {\r\n        const child = this.node.children;\r\n\r\n        this.list.forEach((name, index) => {\r\n            child.find(node => node.name === name).zIndex = (index + 1) * 10;\r\n        })\r\n\r\n        child.find(node => node.name === \"sprite_mask\").zIndex = (this.list.length) * 9;\r\n    }\r\n}\r\n"]}