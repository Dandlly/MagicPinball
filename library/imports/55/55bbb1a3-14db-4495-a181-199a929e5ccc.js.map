{"version":3,"sources":["assets\\script\\common\\Events.ts"],"names":[],"mappings":";;;;;AAAA;;;GAGG;;AAWH;IAAA;QAEI,OAAO;QACC,WAAM,GAAgB,EAAE,CAAC;IAsErC,CAAC;IApEG;;;;;;;;;OASG;IACI,mBAAE,GAAT,UAAU,QAAgB,EAAE,QAAgB,EAAE,SAAiB,EAAE,QAAkB,EAAE,IAAS,EAAE,MAAc;QAAd,uBAAA,EAAA,cAAc;QAC1G,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC;YAAE,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACpF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,UAAA,EAAE,QAAQ,UAAA,EAAE,SAAS,WAAA,EAAE,QAAQ,UAAA,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC,CAAC;IAChF,CAAC;IAED;;;;;;OAMG;IACI,qBAAI,GAAX,UAAY,SAAiB;QAAE,oBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,mCAAoB;;QAC/C,KAAuB,UAAW,EAAX,KAAA,IAAI,CAAC,MAAM,EAAX,cAAW,EAAX,IAAW,EAAE;YAA/B,IAAM,QAAQ,SAAA;YACf,IAAI,QAAQ,CAAC,SAAS,KAAK,SAAS,EAAE;gBAClC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gBACnD,IAAI,QAAQ,CAAC,MAAM,KAAK,IAAI,EAAE,EAAE,UAAU;oBACtC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;iBAC9D;aACJ;SACJ;IACL,CAAC;IAED;;;;;;OAMG;IACI,4BAAW,GAAlB,UAAmB,QAAgB,EAAE,SAAiB;QAClD,KAAuB,UAAW,EAAX,KAAA,IAAI,CAAC,MAAM,EAAX,cAAW,EAAX,IAAW,EAAE;YAA/B,IAAM,QAAQ,SAAA;YACf,IAAI,QAAQ,CAAC,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,SAAS,KAAK,SAAS;gBAAE,OAAO,IAAI,CAAC;SACvF;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;;;;;OAMG;IACI,+BAAc,GAArB,UAAsB,QAAgB,EAAE,SAAiB;QACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,QAAQ,CAAC,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,SAAS,KAAK,SAAS,EAAE;gBACpE,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACzB,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACzB,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;gBAC1B,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACzB,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzB,MAAM;aACT;SACJ;IACL,CAAC;IACL,aAAC;AAAD,CAzEA,AAyEC,IAAA;AACY,QAAA,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 事件控制器\r\n * @author yxx0\r\n */\r\n\r\ninterface EventInfo {\r\n    compName: string;       // 组件名字\r\n    compUUID: string;       // 组件uuid\r\n    eventName: string;      // 事件名字\r\n    callback: Function;     // 回调函数\r\n    that: any;              // 回调函数对象\r\n    isOnce: boolean;       // 是否执行一次就关闭监听\r\n}\r\n\r\nclass Events {\r\n\r\n    // 事件对象\r\n    private events: EventInfo[] = [];\r\n\r\n    /**\r\n     * 事件监听\r\n     * @public\r\n     * @param {string} compName \r\n     * @param {string} compUUID \r\n     * @param {string} eventName \r\n     * @param {Function} callback \r\n     * @param {any} that \r\n     * @returns\r\n     */\r\n    public on(compName: string, compUUID: string, eventName: string, callback: Function, that: any, isOnce = false): void {\r\n        if (this.hasListener(compName, eventName)) this.removeListener(compName, eventName);\r\n        this.events.push({ compName, compUUID, eventName, callback, that, isOnce });\r\n    }\r\n\r\n    /**\r\n     * 事件发送\r\n     * @public\r\n     * @param {string} eventName\r\n     * @param {any[]} restOfData\r\n     * @returns\r\n     */\r\n    public emit(eventName: string, ...restOfData: any[]): void {\r\n        for (const listener of this.events) {\r\n            if (listener.eventName === eventName) {\r\n                listener.callback.apply(listener.that, restOfData);\r\n                if (listener.isOnce === true) { // 执行一次就删除\r\n                    this.removeListener(listener.compName, listener.eventName);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 校验是否有监听事件\r\n     * @private\r\n     * @param {string} compName \r\n     * @param {string} eventName \r\n     * @returns\r\n     */\r\n    public hasListener(compName: string, eventName: string): boolean {\r\n        for (const listener of this.events) {\r\n            if (listener.compName === compName && listener.eventName === eventName) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 移除事件监听器\r\n     * @private\r\n     * @param {string} compName \r\n     * @param {string} eventName \r\n     * @returns\r\n     */\r\n    public removeListener(compName: string, eventName: string): void {\r\n        for (let i = 0; i < this.events.length; i++) {\r\n            let listener = this.events[i];\r\n            if (listener.compName === compName && listener.eventName === eventName) {\r\n                listener.compName = null;\r\n                listener.compUUID = null;\r\n                listener.eventName = null;\r\n                listener.callback = null;\r\n                listener.that = null;\r\n                this.events.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\nexport const events = new Events();\r\n"]}